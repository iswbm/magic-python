3.1 八种连接列表的方式
======================

|image0|

1、最直观的相加
---------------

使用 ``+`` 对多个列表进行相加，你应该懂，不多说了。

.. code:: python

   >>> list01 = [1,2,3]
   >>> list02 = [4,5,6]
   >>> list03 = [7,8,9]
   >>>
   >>> list01 + list02 + list03
   [1, 2, 3, 4, 5, 6, 7, 8, 9]
   >>> 

2、借助 itertools
-----------------

itertools 在 Python
里有一个非常强大的内置模块，它专门用于操作可迭代对象。

在前面的文章中也介绍过，使用 ``itertools.chain()``
函数先将可迭代对象（在这里指的是列表）串联起来，组成一个更大的可迭代对象。

最后你再利用 list 将其转化为 列表。

.. code:: python

   >>> from itertools import chain
   >>> list01 = [1,2,3]
   >>> list02 = [4,5,6]
   >>> list03 = [7,8,9]
   >>>
   >>> list(chain(list01, list02, list03))
   [1, 2, 3, 4, 5, 6, 7, 8, 9]
   >>>

3、使用 \* 解包
---------------

使用 ``*`` 可以解包列表，解包后再合并。

示例如下：

.. code:: python

   >>> list01 = [1,2,3]
   >>> list02 = [4,5,6]
   >>>
   >>> [*list01, *list02]
   [1, 2, 3, 4, 5, 6]
   >>>

4、使用 extend
--------------

在字典中，使用 update 可实现原地更新，而在列表中，使用 extend
可实现列表的自我扩展。

.. code:: python

   >>> list01 = [1,2,3]
   >>> list02 = [4,5,6]
   >>>
   >>> list01.extend(list02)
   >>> list01
   [1, 2, 3, 4, 5, 6]

5、使用列表推导式
-----------------

Python 里对于生成列表、集合、字典，有一套非常 Pythonnic 的写法。

那就是列表解析式，集合解析式和字典解析式，通常是 Python
发烧友的最爱，那么今天的主题：列表合并，列表推导式还能否胜任呢？

当然可以，具体示例代码如下：

.. code:: python

   >>> list01 = [1,2,3]
   >>> list02 = [4,5,6]
   >>> list03 = [7,8,9]
   >>>
   >>> [x for l in (list01, list02, list03) for x in l]
   [1, 2, 3, 4, 5, 6, 7, 8, 9]
   >>>

6、使用 heapq
-------------

heapq 是 Python 的一个标准模块，它提供了堆排序算法的实现。

该模块里有一个 merge 方法，可以用于合并多个列表，如下所示

.. code:: python

   >>> list01 = [1,2,3]
   >>> list02 = [4,5,6]
   >>> list03 = [7,8,9]
   >>>
   >>> from heapq import merge
   >>>
   >>> list(merge(list01, list02, list03))
   [1, 2, 3, 4, 5, 6, 7, 8, 9]
   >>> 

要注意的是，heapq.merge
除了合并多个列表外，它还会将合并后的最终的列表进行排序。

.. code:: python

   >>> list01 = [2,5,3]
   >>> list02 = [1,4,6]
   >>> list03 = [7,9,8]
   >>> 
   >>> from heapq import merge
   >>> 
   >>> list(merge(list01, list02, list03))
   [1, 2, 4, 5, 3, 6, 7, 9, 8]
   >>> 

它的效果等价于下面这行代码：

.. code:: python

   sorted(itertools.chain(*iterables))

如果你希望得到一个始终有序的列表，那请第一时间想到
heapq.merge，因为它采用堆排序，效率非常高。但若你不希望得到一个排过序的列表，就不要使用它了。

7、借助魔法方法
---------------

有一个魔法方法叫 ``__add__``\ ，当我们使用第一种方法 list01 + list02
的时候，内部实际上是作用在 ``__add__`` 这个魔法方法上的。

所以以下两种方法其实是等价的

.. code:: python

   >>> list01 = [1,2,3]
   >>> list02 = [4,5,6]
   >>> 
   >>> list01 + list02
   [1, 2, 3, 4, 5, 6]
   >>> 
   >>> 
   >>> list01.__add__(list02)
   [1, 2, 3, 4, 5, 6]
   >>> 

借用这个魔法特性，我们可以配合 reduce
这个方法来对多个列表进行合并，示例代码如下

.. code:: python

   >>> list01 = [1,2,3]
   >>> list02 = [4,5,6]
   >>> list03 = [7,8,9]
   >>>
   >>> from functools import reduce
   >>> reduce(list.__add__, (list01, list02, list03))
   [1, 2, 3, 4, 5, 6, 7, 8, 9]
   >>>

8. 使用 yield from
------------------

在 yield from 后可接一个可迭代对象，用于迭代并返回其中的每一个元素。

因此，我们可以像下面这样自定义一个合并列表的工具函数。

.. code:: python

   >>> list01 = [1,2,3]
   >>> list02 = [4,5,6]
   >>> list03 = [7,8,9]
   >>>
   >>> def merge(*lists):
   ...   for l in lists:
   ...     yield from l
   ...
   >>> list(merge(list01, list02, list03))
   [1, 2, 3, 4, 5, 6, 7, 8, 9]
   >>

|image1|

.. |image0| image:: https://image.iswbm.com/20200804124133.png
.. |image1| image:: https://image.iswbm.com/20200607174235.png

